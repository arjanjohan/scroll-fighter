{"noir_version":"0.27.0+606ff4448571b0cfe4b92420c766c4239a4b23a0","hash":10449449238385822999,"abi":{"parameters":[{"name":"inputs","type":{"kind":"array","length":5,"type":{"kind":"field"}},"visibility":"private"}],"param_witnesses":{"inputs":[{"start":0,"end":5}]},"return_type":null,"return_witnesses":[]},"bytecode":"H4sIAAAAAAAA/+1Y7W7aQBAcoIGm+YKk+SJJYwhJmo+qPsBg/uUB+hJAzGP3UaJyzRldLpe2qmctiHwSOgvM7N56d7w7JTyv/vzzw1xX5p8yXq+S2R/MHmZbiogVetzNiq3SCzsWa2avzj8fret0uXHzxfHJfF9y4vpkrtP/VMx3cO4rWddlC++te0pv4Gx4/Gx4vivBWQ9mD7MtlR5WB/WndXgd0MCxWSHbtrF64aDfT4bdRPXUOOyOJnEU9qPJIFaxiuLosRv3ekncj4ejyWgYjlS/l6hZNOrODNZadqyewQqrkCmKMjl+zDPXPFiTcPoYqcngcaiScRRPp6OeUt3xYDyYdONZMolUHMVzzOm4G8/NdcdTlYTjQVKBJ2HBJ68aDyu0/dWkUjPXVY//9n3pM30i50xaa2t4nT8frN+rli8lvi/KPq/vuTY88REjKxuchVlzgsfCXQevOKXOvc5/Rl5fGYS8LoD7DTJEz3pRpn4yc+kTMYeY8UsbD+1fC//eAS/By37RpXrcFemA065xE//fAbfh74DbeN0Bt63/vdUBt/H3DtiHszQdsA5m4NhwC5mZbFk73g2iX5uQKQJ2sW6ARzh5jdiMaWL2vKYed0UIZsvs2ygIhkYwOpiBY4M9UjMJZgu8wt2GTBGwCWYLq0cwJaLPHndFCGbH7HUUGh6NYHRQbQ1PBzdwbFYEbKdYWQlnB7xCrkOmKNgaHvPMDayehtfgYb3Q8HZRaHhmvX8NTx9gVwB3D8ut4elz7/GfkYiGVze+snG/Q4bo2RoeM5c+E3OIGb+08dD+tZCfhkd42eeu4e2b/QDFiE3rgHUwA8cGW8OrZ8dadLz7RL8OIFME7GLdB49w8hqxGdNE3hreodmPUBAMjWB0MAPHBnukZhLMIXiFewSZImATzCFWj2DKRJ897ooQzLHZmyg0PBrB6KDaGp4ObuDYZBOOnXxZCecYvEJuQqYo2Boe88wnWD0N74SH9ULDO0Wh4Zn1/jU8nUSnArhnWG4NT5/7jP+MRDS8pvGVjasgQ/RsDY+ZS1+IOcSMX9p4aP9ayE/DI7zsc9fwzs0eoBixaR1wAHkNr5kda9HxnhP9CiBTBOxiPQePcPIasRnTRN4aXsvsumALgsm2FgSjnQscG+yRmkkwLfAKtw2ZImATTAurRzAVos8ed0UI5sLsHRQaHo1gdFBtDU8HN3BssgnHTr6shHMBXiF3IFMUbA2PeeZLrJ6Gd8nDeqHhXaHQ8Mx6/xqeTqIrAdxrLLeGp899zX9GIhpex/jKxu1BhujZGh4zl74Sc4gZv7Tx0P7lqeERXva5a3g3Zr9FMWLTOmAdzMCxwdbwOtmxFh3vDdGvW8gUAbtYb8AjnLxGbMY0kbeGd2f2exQEQyMYHczAscEeqZkEcwde4d5DpgjYBHPHexa/OxrfGJfmg/7tA/6wfgEjYZSUZU8AAA==","debug_symbols":"lde9aoRAGEbhe5nawpn5ftRbCSnMxoAg7rKaQBDvPUp2GxGW0znIU8jrKWYJw/XSzv11nEKzhDI0b0uYbu24n6a5vc+hyeJF6MbP7cnyWoSvfuhCI76+FyFSkCjIFAgFSoFR4BRUFNR4OD71y639KBIWGQvB4nzvKj6ElPEoDAvHosLidHMt7SE0Hr88lVhELBIWGQvBQrEwLByLCgu8eX61eTr+VzlikbDIWJxvnuunUDkKxcKwcCzw5hlvLrhzwZ0L7lxw54I7F9y54M4Fdy54c6lpH4o7V9y54s410z4Ud664c8WdK95c8eaKOzfcueHODXduuHPDnRvu3HDnhje3ivZhuHPHnTvu3BPtw3Hnjjt32Pl2+GnvffsxdPvddn/3PV6eV93tOP/e/t+sfw==","file_map":{"47":{"source":"use dep::std;\n\n// fn main(fighterID: Field, moves: [Field; 3], secret: Field) {\n//     assert(fighterID as u32 > 0);\n//     assert(fighterID as u32 < 4);\n//     for move in moves {\n//         assert(move as u32 > 0);\n//         assert(move as u32 < 4);\n//     }\n// }\n\nfn main(inputs: [Field; 5]) {\n    let fighterID: Field = inputs[0];\n    assert(fighterID as u32 > 0);\n    assert(fighterID as u32 < 4);\n    let moves: [Field; 3] = [inputs[1], inputs[2], inputs[3]];\n    for move in moves {\n        assert(move as u32 > 0);\n        assert(move as u32 < 4);\n    }\n    // let secret: Field = inputs[4];\n}\n\n// #[test]\n// fn test_main() {\n//     let fighterID: Field = 1;\n//     let moves: [Field; 3] = [1, 2, 3];\n//     let secret: Field = 1;\n\n//     main(fighterID, moves, secret);\n// }\n\n// #[test(should_fail)]\n// fn test_unknown_fighter() {\n//     let fighterID: Field = 5;\n//     let moves: [Field; 3] = [1, 2, 3];\n//     let secret: Field = 1;\n\n//     main(fighterID, moves, secret);\n// }\n\n// #[test(should_fail)]\n// fn test_invalid_moves() {\n//     let fighterID: Field = 1;\n//     let moves: [Field; 3] = [4, 2, 3];\n//     let secret: Field = 1;\n\n//     main(fighterID, moves, secret);\n// }\n\n// #[test(should_fail)]\n// fn test_invalid_moves_special() {\n//     let fighterID: Field = 1;\n//     let moves: [Field; 3] = [3, 2, 3];\n//     let secret: Field = 1;\n\n//     main(fighterID, moves, secret);\n// }\n\n// #[test(should_fail)]\n// fn test_secret_fail() {\n//     let fighterID: Field = 1;\n//     let moves: [Field; 3] = [1, 2, 3];\n//     let secret: Field = 1;\n\n//     main(fighterID, moves, secret);\n// }\n","path":"/home/arjanjohan/git/hack/scroll24/scroll-fighter/packages/noir/circuits/src/main.nr"}},"names":["main"]}