schema {
  query: Query
  subscription: Subscription
}

"""
Marks the GraphQL type as indexable entity.  Each type that should be an entity is required to be annotated with this directive.
"""
directive @entity on OBJECT

"""Defined a Subgraph ID for an object type"""
directive @subgraphId(id: String!) on OBJECT

"""
creates a virtual field on the entity that may be queried but cannot be set manually through the mappings API.
"""
directive @derivedFrom(field: String!) on FIELD_DEFINITION

enum Aggregation_interval {
  hour
  day
}

scalar BigDecimal

scalar BigInt

input BlockChangedFilter {
  number_gte: Int!
}

input Block_height {
  hash: Bytes
  number: Int
  number_gte: Int
}

scalar Bytes

type FightersRevealed {
  id: Bytes!
  gameId: BigInt!
  player1: Bytes!
  player2: Bytes!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input FightersRevealed_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  gameId: BigInt
  gameId_not: BigInt
  gameId_gt: BigInt
  gameId_lt: BigInt
  gameId_gte: BigInt
  gameId_lte: BigInt
  gameId_in: [BigInt!]
  gameId_not_in: [BigInt!]
  player1: Bytes
  player1_not: Bytes
  player1_gt: Bytes
  player1_lt: Bytes
  player1_gte: Bytes
  player1_lte: Bytes
  player1_in: [Bytes!]
  player1_not_in: [Bytes!]
  player1_contains: Bytes
  player1_not_contains: Bytes
  player2: Bytes
  player2_not: Bytes
  player2_gt: Bytes
  player2_lt: Bytes
  player2_gte: Bytes
  player2_lte: Bytes
  player2_in: [Bytes!]
  player2_not_in: [Bytes!]
  player2_contains: Bytes
  player2_not_contains: Bytes
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [FightersRevealed_filter]
  or: [FightersRevealed_filter]
}

enum FightersRevealed_orderBy {
  id
  gameId
  player1
  player2
  blockNumber
  blockTimestamp
  transactionHash
}

type GameAccepted {
  id: Bytes!
  gameId: BigInt!
  player1: Bytes!
  player2: Bytes!
  wageredAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input GameAccepted_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  gameId: BigInt
  gameId_not: BigInt
  gameId_gt: BigInt
  gameId_lt: BigInt
  gameId_gte: BigInt
  gameId_lte: BigInt
  gameId_in: [BigInt!]
  gameId_not_in: [BigInt!]
  player1: Bytes
  player1_not: Bytes
  player1_gt: Bytes
  player1_lt: Bytes
  player1_gte: Bytes
  player1_lte: Bytes
  player1_in: [Bytes!]
  player1_not_in: [Bytes!]
  player1_contains: Bytes
  player1_not_contains: Bytes
  player2: Bytes
  player2_not: Bytes
  player2_gt: Bytes
  player2_lt: Bytes
  player2_gte: Bytes
  player2_lte: Bytes
  player2_in: [Bytes!]
  player2_not_in: [Bytes!]
  player2_contains: Bytes
  player2_not_contains: Bytes
  wageredAmount: BigInt
  wageredAmount_not: BigInt
  wageredAmount_gt: BigInt
  wageredAmount_lt: BigInt
  wageredAmount_gte: BigInt
  wageredAmount_lte: BigInt
  wageredAmount_in: [BigInt!]
  wageredAmount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameAccepted_filter]
  or: [GameAccepted_filter]
}

enum GameAccepted_orderBy {
  id
  gameId
  player1
  player2
  wageredAmount
  blockNumber
  blockTimestamp
  transactionHash
}

type GameEnded {
  id: Bytes!
  gameId: BigInt!
  player1: Bytes!
  player2: Bytes!
  winner: Bytes!
  wageredAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type GameEndedByTimeout {
  id: Bytes!
  gameId: BigInt!
  player1: Bytes!
  player2: Bytes!
  winner: Bytes!
  wageredAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input GameEndedByTimeout_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  gameId: BigInt
  gameId_not: BigInt
  gameId_gt: BigInt
  gameId_lt: BigInt
  gameId_gte: BigInt
  gameId_lte: BigInt
  gameId_in: [BigInt!]
  gameId_not_in: [BigInt!]
  player1: Bytes
  player1_not: Bytes
  player1_gt: Bytes
  player1_lt: Bytes
  player1_gte: Bytes
  player1_lte: Bytes
  player1_in: [Bytes!]
  player1_not_in: [Bytes!]
  player1_contains: Bytes
  player1_not_contains: Bytes
  player2: Bytes
  player2_not: Bytes
  player2_gt: Bytes
  player2_lt: Bytes
  player2_gte: Bytes
  player2_lte: Bytes
  player2_in: [Bytes!]
  player2_not_in: [Bytes!]
  player2_contains: Bytes
  player2_not_contains: Bytes
  winner: Bytes
  winner_not: Bytes
  winner_gt: Bytes
  winner_lt: Bytes
  winner_gte: Bytes
  winner_lte: Bytes
  winner_in: [Bytes!]
  winner_not_in: [Bytes!]
  winner_contains: Bytes
  winner_not_contains: Bytes
  wageredAmount: BigInt
  wageredAmount_not: BigInt
  wageredAmount_gt: BigInt
  wageredAmount_lt: BigInt
  wageredAmount_gte: BigInt
  wageredAmount_lte: BigInt
  wageredAmount_in: [BigInt!]
  wageredAmount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameEndedByTimeout_filter]
  or: [GameEndedByTimeout_filter]
}

enum GameEndedByTimeout_orderBy {
  id
  gameId
  player1
  player2
  winner
  wageredAmount
  blockNumber
  blockTimestamp
  transactionHash
}

input GameEnded_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  gameId: BigInt
  gameId_not: BigInt
  gameId_gt: BigInt
  gameId_lt: BigInt
  gameId_gte: BigInt
  gameId_lte: BigInt
  gameId_in: [BigInt!]
  gameId_not_in: [BigInt!]
  player1: Bytes
  player1_not: Bytes
  player1_gt: Bytes
  player1_lt: Bytes
  player1_gte: Bytes
  player1_lte: Bytes
  player1_in: [Bytes!]
  player1_not_in: [Bytes!]
  player1_contains: Bytes
  player1_not_contains: Bytes
  player2: Bytes
  player2_not: Bytes
  player2_gt: Bytes
  player2_lt: Bytes
  player2_gte: Bytes
  player2_lte: Bytes
  player2_in: [Bytes!]
  player2_not_in: [Bytes!]
  player2_contains: Bytes
  player2_not_contains: Bytes
  winner: Bytes
  winner_not: Bytes
  winner_gt: Bytes
  winner_lt: Bytes
  winner_gte: Bytes
  winner_lte: Bytes
  winner_in: [Bytes!]
  winner_not_in: [Bytes!]
  winner_contains: Bytes
  winner_not_contains: Bytes
  wageredAmount: BigInt
  wageredAmount_not: BigInt
  wageredAmount_gt: BigInt
  wageredAmount_lt: BigInt
  wageredAmount_gte: BigInt
  wageredAmount_lte: BigInt
  wageredAmount_in: [BigInt!]
  wageredAmount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameEnded_filter]
  or: [GameEnded_filter]
}

enum GameEnded_orderBy {
  id
  gameId
  player1
  player2
  winner
  wageredAmount
  blockNumber
  blockTimestamp
  transactionHash
}

type GameProposed {
  id: Bytes!
  gameId: BigInt!
  player1: Bytes!
  player2: Bytes!
  wageredAmount: BigInt!
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

input GameProposed_filter {
  id: Bytes
  id_not: Bytes
  id_gt: Bytes
  id_lt: Bytes
  id_gte: Bytes
  id_lte: Bytes
  id_in: [Bytes!]
  id_not_in: [Bytes!]
  id_contains: Bytes
  id_not_contains: Bytes
  gameId: BigInt
  gameId_not: BigInt
  gameId_gt: BigInt
  gameId_lt: BigInt
  gameId_gte: BigInt
  gameId_lte: BigInt
  gameId_in: [BigInt!]
  gameId_not_in: [BigInt!]
  player1: Bytes
  player1_not: Bytes
  player1_gt: Bytes
  player1_lt: Bytes
  player1_gte: Bytes
  player1_lte: Bytes
  player1_in: [Bytes!]
  player1_not_in: [Bytes!]
  player1_contains: Bytes
  player1_not_contains: Bytes
  player2: Bytes
  player2_not: Bytes
  player2_gt: Bytes
  player2_lt: Bytes
  player2_gte: Bytes
  player2_lte: Bytes
  player2_in: [Bytes!]
  player2_not_in: [Bytes!]
  player2_contains: Bytes
  player2_not_contains: Bytes
  wageredAmount: BigInt
  wageredAmount_not: BigInt
  wageredAmount_gt: BigInt
  wageredAmount_lt: BigInt
  wageredAmount_gte: BigInt
  wageredAmount_lte: BigInt
  wageredAmount_in: [BigInt!]
  wageredAmount_not_in: [BigInt!]
  blockNumber: BigInt
  blockNumber_not: BigInt
  blockNumber_gt: BigInt
  blockNumber_lt: BigInt
  blockNumber_gte: BigInt
  blockNumber_lte: BigInt
  blockNumber_in: [BigInt!]
  blockNumber_not_in: [BigInt!]
  blockTimestamp: BigInt
  blockTimestamp_not: BigInt
  blockTimestamp_gt: BigInt
  blockTimestamp_lt: BigInt
  blockTimestamp_gte: BigInt
  blockTimestamp_lte: BigInt
  blockTimestamp_in: [BigInt!]
  blockTimestamp_not_in: [BigInt!]
  transactionHash: Bytes
  transactionHash_not: Bytes
  transactionHash_gt: Bytes
  transactionHash_lt: Bytes
  transactionHash_gte: Bytes
  transactionHash_lte: Bytes
  transactionHash_in: [Bytes!]
  transactionHash_not_in: [Bytes!]
  transactionHash_contains: Bytes
  transactionHash_not_contains: Bytes
  """Filter for the block changed event."""
  _change_block: BlockChangedFilter
  and: [GameProposed_filter]
  or: [GameProposed_filter]
}

enum GameProposed_orderBy {
  id
  gameId
  player1
  player2
  wageredAmount
  blockNumber
  blockTimestamp
  transactionHash
}

"""
8 bytes signed integer

"""
scalar Int8

"""Defines the order direction, either ascending or descending"""
enum OrderDirection {
  asc
  desc
}

type Query {
  fightersRevealed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FightersRevealed
  fightersRevealeds(
    skip: Int = 0
    first: Int = 100
    orderBy: FightersRevealed_orderBy
    orderDirection: OrderDirection
    where: FightersRevealed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FightersRevealed!]!
  gameAccepted(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameAccepted
  gameAccepteds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameAccepted_orderBy
    orderDirection: OrderDirection
    where: GameAccepted_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameAccepted!]!
  gameEnded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameEnded
  gameEndeds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameEnded_orderBy
    orderDirection: OrderDirection
    where: GameEnded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameEnded!]!
  gameEndedByTimeout(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameEndedByTimeout
  gameEndedByTimeouts(
    skip: Int = 0
    first: Int = 100
    orderBy: GameEndedByTimeout_orderBy
    orderDirection: OrderDirection
    where: GameEndedByTimeout_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameEndedByTimeout!]!
  gameProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameProposed
  gameProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameProposed_orderBy
    orderDirection: OrderDirection
    where: GameProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameProposed!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

type Subscription {
  fightersRevealed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): FightersRevealed
  fightersRevealeds(
    skip: Int = 0
    first: Int = 100
    orderBy: FightersRevealed_orderBy
    orderDirection: OrderDirection
    where: FightersRevealed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [FightersRevealed!]!
  gameAccepted(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameAccepted
  gameAccepteds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameAccepted_orderBy
    orderDirection: OrderDirection
    where: GameAccepted_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameAccepted!]!
  gameEnded(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameEnded
  gameEndeds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameEnded_orderBy
    orderDirection: OrderDirection
    where: GameEnded_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameEnded!]!
  gameEndedByTimeout(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameEndedByTimeout
  gameEndedByTimeouts(
    skip: Int = 0
    first: Int = 100
    orderBy: GameEndedByTimeout_orderBy
    orderDirection: OrderDirection
    where: GameEndedByTimeout_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameEndedByTimeout!]!
  gameProposed(
    id: ID!
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): GameProposed
  gameProposeds(
    skip: Int = 0
    first: Int = 100
    orderBy: GameProposed_orderBy
    orderDirection: OrderDirection
    where: GameProposed_filter
    """
    The block at which the query should be executed. Can either be a `{ hash: Bytes }` value containing a block hash, a `{ number: Int }` containing the block number, or a `{ number_gte: Int }` containing the minimum block number. In the case of `number_gte`, the query will be executed on the latest block only if the subgraph has progressed to or past the minimum block number. Defaults to the latest block when omitted.
    """
    block: Block_height
    """
    Set to `allow` to receive data even if the subgraph has skipped over errors while syncing.
    """
    subgraphError: _SubgraphErrorPolicy_! = deny
  ): [GameProposed!]!
  """Access to subgraph metadata"""
  _meta(block: Block_height): _Meta_
}

"""
A string representation of microseconds UNIX timestamp (16 digits)

"""
scalar Timestamp

type _Block_ {
  """The hash of the block"""
  hash: Bytes
  """The block number"""
  number: Int!
  """Integer representation of the timestamp stored in blocks for the chain"""
  timestamp: Int
  """The hash of the parent block"""
  parentHash: Bytes
}

"""The type for the top-level _meta field"""
type _Meta_ {
  """
  Information about a specific subgraph block. The hash of the block
  will be null if the _meta field has a block constraint that asks for
  a block number. It will be filled if the _meta field has no block constraint
  and therefore asks for the latest  block
  
  """
  block: _Block_!
  """The deployment ID"""
  deployment: String!
  """If `true`, the subgraph encountered indexing errors at some past block"""
  hasIndexingErrors: Boolean!
}

enum _SubgraphErrorPolicy_ {
  """Data will be returned even if the subgraph has indexing errors"""
  allow
  """
  If the subgraph has indexing errors, data will be omitted. The default.
  """
  deny
}